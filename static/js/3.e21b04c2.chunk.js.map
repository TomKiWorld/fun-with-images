{"version":3,"sources":["components/FaceRecognition/colorsIcon.svg","components/Greet/Greet.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","components/ColorList/ColorList.js","containers/FaceApp/FaceApp.js"],"names":["module","exports","Greet","name","entries","greet","className","ImageLinkForm","onInputChange","onButtonSubmit","imageUrlError","getColorsError","getFacesError","inputValue","value","type","onChange","e","target","onKeyUp","keyCode","document","querySelector","click","handleKeyUp","onClick","FaceRecognition","imageUrl","onShowClick","imgBlock","id","src","alt","colorsView","colorsIcon","ColorList","colors","showColor","display","colorText","length","list","map","color","hex","key","style","backgroundColor","FaceApp","onImageUrlSubmit","props","test","onImageChange","onImageError","querySelectorAll","forEach","el","remove","getColors","getFaces","fetch","DATABASE","method","headers","body","JSON","stringify","input","then","response","json","outputs","errMsg","setState","Error","user","url","count","onEntriesUpdate","catch","err","console","log","colorsUsed","data","singleColor","w3c","push","calculateFaceLocations","imageElement","getElementById","imageWidth","Number","width","imageHeight","height","clarifaiFaces","regions","boundingBoxes","face","calculateBoundingBox","boundingBox","displayBoundingBox","faceBoundingBoxData","region_info","bounding_box","leftCol","left_col","topRow","top_row","RightCol","right_col","bottomRow","bottom_row","box","holder","createElement","classList","add","left","toFixed","top","right","bottom","parentElement","appendChild","toggleColorList","showColorList","state","this","resubmit","onResubmitImageUrl","imageUrlErrorMsg","Component","connect","imageUrlInputValue","userInformation","dispatch","text","setInputValue","setImageUrl","setImageUrlErr","bool","resubmitImageUrl","setEntries"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,wC,yICyB5BC,EAfD,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACdC,EAAQD,EAAU,EAAI,eAAiB,aAC7C,OACE,6BACE,yBAAKE,UAAU,YACb,4BAAKD,EAAL,IAAY,0BAAMC,UAAU,cAAcH,IAC1C,4DAEF,yBAAKG,UAAU,YACb,+BAAKF,MC8BEG,G,OA3BO,SAAC,GAAiG,IAA/FC,EAA8F,EAA9FA,cAAeC,EAA+E,EAA/EA,eAAgBC,EAA+D,EAA/DA,cAAeC,EAAgD,EAAhDA,eAAgBC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WACpG,OACE,6BACE,uBAAGP,UAAU,MAAb,oCACA,2CAAgB,8CAAhB,sCACA,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gCACb,2BACEA,UAAU,qBACVQ,MAAOD,EACPE,KAAK,MACLC,SAAU,SAACC,GAAD,OAAOT,EAAcS,EAAEC,OAAOJ,QACxCK,QAAS,SAACF,GAAD,OAnBD,SAACA,GACD,KAAdA,EAAEG,SACWC,SAASC,cAAc,WAC/BC,QAgBiBC,CAAYP,MAE9B,4BACEX,UAAU,wDACVmB,QAAShB,GAFX,YAMHC,EACAC,EACAC,K,2BCfQc,EAfS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC/BC,EAAWF,EAAW,yBAAKG,GAAG,eAAeC,IAAKJ,EAAUK,IAAI,WAAc,2DAC9EC,EAAaN,EACjB,yBAAKrB,UAAU,cAAcmB,QAASG,GACpC,yBAAKG,IAAKG,IAAYF,IAAI,iBACnB,GAET,OACE,yBAAK1B,UAAU,uBACZ2B,EACAJ,ICSQM,G,OAtBG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,UAAWT,EAAkB,EAAlBA,YAChCU,EAAUD,EAAY,QAAU,OAClCE,EAAY,kDAChB,GAAGH,EAAOI,OAAQ,CAChB,IAAMC,EAAOL,EAAOM,KAAI,SAAAC,GAAU,IACxBC,EAAcD,EAAdC,IAAKzC,EAASwC,EAATxC,KACb,OAAO,wBAAI0C,IAAKD,GAAM,0BAAME,MAAO,CAACC,gBAAgBH,KAA7C,QAAgEA,EAAhE,WAA6EzC,MAEtFoC,EAAY,4BAAKE,GAGnB,OACE,yBAAKnC,UAAU,kBAAkBwC,MAAO,CAACR,QAASA,IAChD,0BACEhC,UAAU,eACVmB,QAASG,GAFX,KAGA,2DACCW,KCKDS,E,kDACJ,aAAe,IAAD,8BACZ,gBAoBFC,iBAAmB,WACjB,GAAI,EAAKC,MAAMrC,WAAY,CAErB,EAAKqC,MAAMrC,aAAe,EAAKqC,MAAMvB,SADzB,+aAEHwB,KAAK,EAAKD,MAAMrC,aACzB,EAAKqC,MAAME,cAAc,EAAKF,MAAMrC,YACpC,EAAKqC,MAAMG,aAAa,IACxBhC,SAASiC,iBAAiB,iBAAiBC,SAAQ,SAAAC,GAAE,OAAIA,EAAGC,YAC5D,EAAKC,YACL,EAAKC,YAEL,EAAKT,MAAMG,aAAa,4BAG1B,EAAKH,MAAMG,aAAa,+BAG1B,EAAKH,MAAMG,aAAa,8BAtCd,EA2CdK,UAAY,WACVE,MAAM,GAAD,OAAIC,IAAJ,iBAA6B,CAChCC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,EAAKjB,MAAMrC,eAGrBuD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,IAAKA,IAAaA,EAASE,QAAS,CAClC,IAAMC,EAASH,GAAsB,6BAErC,MADA,EAAKI,SAAS,CAAC9D,eAAgB6D,IACzB,IAAIE,MAAMF,GAEhB,EAAKC,SAAS,CAAC9D,eAAgB,KAEjCiD,MAAM,GAAD,OAAIC,IAAJ,UAAsB,CACzBC,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBpC,GAAI,EAAKoB,MAAMyB,KAAK7C,GACpB8C,IAAK,EAAK1B,MAAMvB,aAGnByC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAS,GACJ,EAAK3B,MAAM4B,gBAAgB,EAAK5B,MAAMyB,KAAME,MAE7CE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,oBAAqBF,MAE/C,IAAMG,EAAa,GACCd,EAASE,QAAQ,GAAGa,KAAKhD,OACjCM,KAAI,SAAA2C,GACd,IAAM1C,EAAQ,CACZC,IAAKyC,EAAYC,IAAI1C,IACrBzC,KAAMkF,EAAYC,IAAInF,MAGxB,OADAgF,EAAWI,KAAK5C,GACT,EAAK8B,SAAS,CAACrC,OAAQ+C,UAGjCJ,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OArFd,EAyFdrB,SAAW,WACTC,MAAM,GAAD,OAAIC,IAAJ,gBAA4B,CAC/BC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,EAAKjB,MAAMrC,eAGrBuD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,IAAKA,IAAaA,EAASE,QAAS,CAClC,IAAMC,EAASH,GAAsB,8BAErC,MADA,EAAKI,SAAS,CAAC7D,cAAe4D,IACxB,IAAIE,MAAMF,GAEhB,EAAKC,SAAS,CAAC7D,cAAe,KAEhC,EAAK4E,uBAAuBnB,MAE7BU,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,mBAAoBF,OA5GlC,EAgHdQ,uBAAyB,SAACJ,GACxB,IAAMK,EAAepE,SAASqE,eAAe,gBAC7C,GAAKD,EAAL,CAGA,IAAME,EAAaC,OAAOH,EAAaI,OACjCC,EAAcF,OAAOH,EAAaM,QAClCC,EAAgBZ,EAAKb,QAAQ,GAAGa,KAAKa,QACrCC,EAAgB,GACtBF,EAActD,KAAI,SAAAyD,GAAI,OAAI,EAAKC,qBAAqBD,EAAMR,EAAYG,EAAaI,MACnFA,EAAcxD,KAAI,SAAA2D,GAAW,OAAI,EAAKC,mBAAmBD,EAAaZ,QA1H1D,EA8HdW,qBAAuB,SAACD,EAAMR,EAAYG,EAAaI,GACrD,IAAMK,EAAsBJ,EAAKK,YAAYC,aACvCJ,EAAc,CAClBK,QAASH,EAAoBI,SAAWhB,EACxCiB,OAAQL,EAAoBM,QAAUf,EACtCgB,SAAUnB,EAAcY,EAAoBQ,UAAYpB,EACxDqB,UAAWlB,EAAeS,EAAoBU,WAAanB,GAE7DI,EAAcX,KAAKc,IAtIP,EA0IdC,mBAAqB,SAACY,EAAKC,GACzB,IAAMd,EAAchF,SAAS+F,cAAc,OAM3C,OALAf,EAAYgB,UAAUC,IAAI,gBAC1BjB,EAAYvD,MAAMyE,KAAlB,UAA4BL,EAAIR,QAAQc,QAAQ,GAAhD,MACAnB,EAAYvD,MAAM2E,IAAlB,UAA2BP,EAAIN,OAAOY,QAAQ,GAA9C,MACAnB,EAAYvD,MAAM4E,MAAlB,UAA6BR,EAAIJ,SAASU,QAAQ,GAAlD,MACAnB,EAAYvD,MAAM6E,OAAlB,UAA8BT,EAAIF,UAAUQ,QAAQ,GAApD,MACOL,EAAOS,cAAcC,YAAYxB,IAjJ5B,EAqJdyB,gBAAkB,WAChB,EAAKrD,SAAS,CAACsD,eAAgB,EAAKC,MAAMD,iBApJ1C,EAAKC,MAAQ,CACXD,eAAe,EACfpH,eAAgB,GAChBC,cAAe,GACfwB,OAAQ,IANE,E,gEAWT6F,KAAK/E,MAAMgF,UACZD,KAAKhF,mBACLgF,KAAK/E,MAAMiF,oBAAmB,KAE9BlD,QAAQC,MACR+C,KAAK/E,MAAM1C,cAAc,O,+BAyInB,IAAD,EAMHyH,KAAK/E,MAJPyB,EAFK,EAELA,KACAjE,EAHK,EAGLA,cACAF,EAJK,EAILA,cACAmB,EALK,EAKLA,SALK,EAUHsG,KAAKD,MAFPD,EARK,EAQLA,cACA3F,EATK,EASLA,OAEIgG,EAAmB1H,EAAgB,uBAAGJ,UAAU,iBAAiBI,GAAqB,GACtFC,EAAiBsH,KAAKD,MAAMrH,eAAiB,uBAAGL,UAAU,iBAAiB2H,KAAKD,MAAMrH,gBAAsB,GAC5GC,EAAgBqH,KAAKD,MAAMpH,cAAgB,uBAAGN,UAAU,iBAAiB2H,KAAKD,MAAMpH,eAAqB,GAC/G,OACE,6BAASN,UAAU,WACjB,kBAAC,EAAD,CACEH,KAAMwE,EAAKxE,KACXC,QAASuE,EAAKvE,UAChB,kBAAC,EAAD,CACES,WAAYoH,KAAK/E,MAAMrC,WACvBH,cAAe0H,EACfzH,eAAgBA,EAChBC,cAAeA,EACfJ,cAAeA,EACfC,eAAgBwH,KAAKhF,mBACvB,kBAAC,EAAD,CACEtB,SAAUA,EACVC,YAAaqG,KAAKH,kBACpB,kBAAC,EAAD,CACE1F,OAAQA,EACRC,UAAW0F,EACXnG,YAAaqG,KAAKH,uB,GA1LNO,aAgMPC,uBAvNS,SAACN,GACvB,MAAO,CACLnH,WAAYmH,EAAMO,mBAAmB1H,WACrCc,SAAUqG,EAAMO,mBAAmB5G,SACnCjB,cAAesH,EAAMO,mBAAmB7H,cACxCwH,SAAUF,EAAMO,mBAAmBL,SACnCvD,KAAMqD,EAAMQ,gBAAgB7D,SAIL,SAAC8D,GAC1B,MAAO,CACLjI,cAAe,SAACkI,GAAD,OAAUD,EAASE,YAAcD,KAChDtF,cAAe,SAACsF,GAAD,OAAUD,EAASG,YAAYF,KAC9CrF,aAAc,SAACqF,GAAD,OAAUD,EAASI,YAAeH,KAChDP,mBAAoB,SAACW,GAAD,OAAUL,EAASM,YAAiBD,KACxDhE,gBAAiB,SAACH,EAAME,GAAP,OAAiB4D,EAASO,YAAWrE,EAAME,QAuMjDyD,CAA6CtF","file":"static/js/3.e21b04c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/colorsIcon.16c2fe4a.svg\";","import React from 'react';\n\n/**\n * Greet component\n * - Display short greet and amount of entries the user used the app\n * \n * Required props:\n * - name => User name from state\n * - entries => Amount of times images were submitted from state\n */\nconst Greet = ({name, entries}) => {\n  const greet = entries > 0 ? 'Welcome back' : 'Lets start';\n  return (\n    <div>\n      <div className='white f3'>\n        <h1>{greet} <span className='capitalize'>{name}</span></h1>\n        <p>Your current entry count is:</p>\n      </div>\n      <div className='white f1'>\n        <p>#{entries}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Greet;\n","import React from 'react';\nimport './ImageLinkForm.css';\n\n/**\n * Image link form \n * - Input field to submit a url\n * - submit button\n * \n * Required props:\n * - onInputChange => Register input changes to state\n * - onButtonSubmit => Submit the image url\n * - imageUrlError => Display error to screen\n * - inputValue => Input value from state important in case of resubmission \n */\n// Allow pressing the enter key and not only the button\nconst handleKeyUp = (e) => {\n  if (e.keyCode === 13) {\n    const detect = document.querySelector('.detect');\n    detect.click();\n  }\n}\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit, imageUrlError, getColorsError, getFacesError, inputValue }) => {\n  return (\n    <div>\n      <p className='f3'>This App detects faces in images</p>\n      <p>Click on the <strong>paint icon</strong> to see which colors were detected</p>\n      <div className='center'>\n        <div className='center form pa4 br3 shadow-5'>\n          <input \n            className='f4 pa2 w-70 center' \n            value={inputValue}\n            type='url' \n            onChange={(e) => onInputChange(e.target.value)}\n            onKeyUp={(e) => handleKeyUp(e)}\n          />\n          <button \n            className='detect w-30 grow link ph3 pv2 dib white bg-light-blue' \n            onClick={onButtonSubmit}\n          >Detect</button>\n        </div>\n      </div>\n      {imageUrlError}\n      {getColorsError}\n      {getFacesError}\n    </div>\n  );\n}\n\nexport default ImageLinkForm;\n","import React from 'react';\nimport './FaceRecognition.css';\nimport colorsIcon from './colorsIcon.svg';\n\n/**\n * Displays \n * - Preview of submitted image url \n * - Squares where faces were found\n * - Option to see colors found in the image\n * \n * Required props:\n * - imageUrl => From state\n * - onShowClick => Function to change state of toggle color list\n */\nconst FaceRecognition = ({ imageUrl, onShowClick }) => {\nconst imgBlock = imageUrl ? <img id='imageElement' src={imageUrl} alt='result' /> : <p>Submit an image url to start</p>\nconst colorsView = imageUrl ? \n  <div className='view-colors' onClick={onShowClick}>\n    <img src={colorsIcon} alt='View Colors' />\n  </div> : '';\n\n  return (\n    <div className='center image-holder'>\n      {colorsView}\n      {imgBlock}\n    </div>\n  );\n}\n\nexport default FaceRecognition;\n","import React from 'react';\nimport './ColorList.css';\n\n/**\n * Pop up to show colors detected in images\n * \n * Required props:\n * - colors => Array of colors from the api\n * - showColor => Show or hide the element\n * - onShowClick => On click function to change the value of showColor\n */\nconst ColorList = ({ colors, showColor, onShowClick }) => {\n  const display = showColor ? 'block' : 'none';\n  let colorText = <p>No colors detected.</p>\n  if(colors.length) {\n    const list = colors.map(color => {\n      const { hex, name } = color;\n      return <li key={hex} ><span style={{backgroundColor:hex}}></span>HEX: {hex}, Name: {name}</li>;\n    });\n    colorText = <ul>{list}</ul>;\n  }  \n\n  return (\n    <div className='colors-list br3' style={{display: display}}>\n      <span \n        className='close-colors' \n        onClick={onShowClick}>X</span>\n      <h2>These colors were detected:</h2>\n      {colorText}\n    </div>\n  );\n}\n\nexport default ColorList;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DATABASE } from '../../constants';\nimport { setInputValue, setImageUrl, setImageUrlErr, resubmitImageUrl, setEntries } from '../../actions';\n\nimport Greet from '../../components/Greet/Greet';\nimport ImageLinkForm from '../../components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from '../../components/FaceRecognition/FaceRecognition';\nimport ColorList from '../../components/ColorList/ColorList';\n\nconst mapStateToProps = (state) => {\n  return {\n    inputValue: state.imageUrlInputValue.inputValue,\n    imageUrl: state.imageUrlInputValue.imageUrl,\n    imageUrlError: state.imageUrlInputValue.imageUrlError,\n    resubmit: state.imageUrlInputValue.resubmit,\n    user: state.userInformation.user\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onInputChange: (text) => dispatch(setInputValue(text)),\n    onImageChange: (text) => dispatch(setImageUrl(text)),\n    onImageError: (text) => dispatch(setImageUrlErr(text)),\n    onResubmitImageUrl: (bool) => dispatch(resubmitImageUrl(bool)),\n    onEntriesUpdate: (user, count) => dispatch(setEntries(user, count))\n  }\n}\n\n/**\n * Main view of the fun with images app\n */\nclass FaceApp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showColorList: false,\n      getColorsError: '',\n      getFacesError: '',\n      colors: [],\n    };\n  }\n\n  componentDidMount() {\n    if(this.props.resubmit) {\n      this.onImageUrlSubmit();\n      this.props.onResubmitImageUrl(false);\n    } else {\n      console.log()\n      this.props.onInputChange('');\n    }\n  }\n\n  // Validate the url on submit and make sure a new url is entered\n  onImageUrlSubmit = () => {\n    if (this.props.inputValue) {\n      const regexp =  /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n      if (this.props.inputValue !== this.props.imageUrl) {\n        if (regexp.test(this.props.inputValue)) {\n          this.props.onImageChange(this.props.inputValue);\n          this.props.onImageError('');\n          document.querySelectorAll('.bounding-box').forEach(el => el.remove());\n          this.getColors();\n          this.getFaces();\n        } else {\n          this.props.onImageError('Please enter a valid url');\n        }     \n      } else {\n        this.props.onImageError('Please enter a new url');\n      }\n    } else {\n      this.props.onImageError('Please enter an image url');\n    }\n  }\n\n  // Fetch the colors from the colors API and set state\n  getColors = () => {\n    fetch(`${DATABASE}/image-colors`, {\n      method: 'post',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify({\n        input: this.props.inputValue\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      if (!response || !response.outputs) {\n        const errMsg = response ? response : 'No response from faces API';\n        this.setState({getColorsError: errMsg})\n        throw new Error(errMsg);\n      } else {\n        this.setState({getColorsError: ''})\n      }\n      fetch(`${DATABASE}/image`, {\n        method: 'put',\n        headers: {'Content-type': 'application/json'},\n        body: JSON.stringify({\n          id: this.props.user.id,\n          url: this.props.imageUrl\n        })\n      })\n      .then(response => response.json())\n      .then(count => {\n        this.props.onEntriesUpdate(this.props.user, count);\n      })\n      .catch(err => console.log('getFaces colors: ', err))\n      \n      const colorsUsed = [];\n      const colorsFound = response.outputs[0].data.colors;\n      colorsFound.map(singleColor => {\n        const color = {\n          hex: singleColor.w3c.hex,\n          name: singleColor.w3c.name\n        }\n        colorsUsed.push(color);\n        return this.setState({colors: colorsUsed});\n      })\n    })\n    .catch(err => console.log(err));\n  }\n  \n  // Fetch the faces from the faces API and set state\n  getFaces = () => {\n    fetch(`${DATABASE}/image-faces`, {\n      method: 'post',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify({\n        input: this.props.inputValue\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      if (!response || !response.outputs) {\n        const errMsg = response ? response : 'No response from colors API';\n        this.setState({getFacesError: errMsg})\n        throw new Error(errMsg);\n      } else {\n        this.setState({getFacesError: ''})\n      }\n      this.calculateFaceLocations(response)\n    })\n    .catch(err => console.log('getFaces error: ', err));\n  }\n  \n  // Calculate location of all bounding boxes based on the getFaces response\n  calculateFaceLocations = (data) => {\n    const imageElement = document.getElementById('imageElement');\n    if (!imageElement) {\n      return;\n    }\n    const imageWidth = Number(imageElement.width);\n    const imageHeight = Number(imageElement.height);\n    const clarifaiFaces = data.outputs[0].data.regions;\n    const boundingBoxes = [];\n    clarifaiFaces.map(face => this.calculateBoundingBox(face, imageWidth, imageHeight, boundingBoxes));\n    boundingBoxes.map(boundingBox => this.displayBoundingBox(boundingBox, imageElement));    \n  }\n  \n  // Calculate location of a single bounding box based on the getFaces response\n  calculateBoundingBox = (face, imageWidth, imageHeight, boundingBoxes) => {\n    const faceBoundingBoxData = face.region_info.bounding_box;\n    const boundingBox = {\n      leftCol: faceBoundingBoxData.left_col * imageWidth,\n      topRow: faceBoundingBoxData.top_row * imageHeight,\n      RightCol: imageWidth - (faceBoundingBoxData.right_col * imageWidth),\n      bottomRow: imageHeight - (faceBoundingBoxData.bottom_row * imageHeight)\n    }\n    boundingBoxes.push(boundingBox);\n  }\n\n  // Display the bounding box in parent element\n  displayBoundingBox = (box, holder) => {\n    const boundingBox = document.createElement('DIV');\n    boundingBox.classList.add('bounding-box');\n    boundingBox.style.left = `${box.leftCol.toFixed(4)}px`;\n    boundingBox.style.top = `${box.topRow.toFixed(4)}px`;\n    boundingBox.style.right = `${box.RightCol.toFixed(4)}px`;\n    boundingBox.style.bottom = `${box.bottomRow.toFixed(4)}px`;\n    return holder.parentElement.appendChild(boundingBox);\n  }\n\n  // Toggle the color list pop up\n  toggleColorList = () => {\n    this.setState({showColorList: !this.state.showColorList});\n  }\n   \n  render() {\n    const {\n      user,\n      imageUrlError,\n      onInputChange,\n      imageUrl\n    } = this.props;\n    const { \n      showColorList, \n      colors \n    } = this.state;\n    const imageUrlErrorMsg = imageUrlError ? <p className='error-message'>{imageUrlError}</p> : '';\n    const getColorsError = this.state.getColorsError ? <p className='error-message'>{this.state.getColorsError}</p> : '';\n    const getFacesError = this.state.getFacesError ? <p className='error-message'>{this.state.getFacesError}</p> : '';\n    return (\n      <article className='pa4 mb4'>\n        <Greet \n          name={user.name} \n          entries={user.entries} />\n        <ImageLinkForm\n          inputValue={this.props.inputValue}\n          imageUrlError={imageUrlErrorMsg}\n          getColorsError={getColorsError}\n          getFacesError={getFacesError}\n          onInputChange={onInputChange} \n          onButtonSubmit={this.onImageUrlSubmit} />\n        <FaceRecognition \n          imageUrl={imageUrl}\n          onShowClick={this.toggleColorList} />\n        <ColorList \n          colors={colors}\n          showColor={showColorList}\n          onShowClick={this.toggleColorList} />\n      </article>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FaceApp);\n"],"sourceRoot":""}