{"version":3,"sources":["containers/Register/Register.js"],"names":["Register","sanitize","string","map","replace","match","onFieldChange","event","term","setState","target","value","onSubmitRegister","e","preventDefault","state","name","email","password","validName","validEmail","validPassword","nameError","test","emailError","passwordError","loading","fetch","DATABASE","method","headers","body","JSON","stringify","then","response","json","user","id","props","loadUser","registerError","onRouteChange","catch","err","this","className","preload","label","type","onChange","onClick","extraClass","Component"],"mappings":"4NAcMA,E,kDACJ,aAAe,IAAD,8BACZ,gBAcFC,SAAW,SAACC,GACV,IAAMC,EAAM,CACR,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,SACL,IAAK,UAGT,OAAOD,EAAOE,QADF,cACe,SAACC,GAAD,OAAUF,EAAIE,OAzB7B,EA6BdC,cAAgB,SAACC,EAAOC,GACtB,EAAKC,SAAL,eAAgBD,EAAOD,EAAMG,OAAOC,SA9BxB,EAkCdC,iBAAmB,SAACC,GAClBA,EAAEC,iBADsB,MAEO,EAAKC,MAA/BC,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,MAAOC,EAFM,EAENA,SACdC,GAAY,EACZC,GAAa,EACbC,GAAgB,EAGP,KAATL,GACFA,EAAO,EAAKf,SAASe,GACrB,EAAKP,SAAS,CAACO,KAAMA,IACrBG,GAAY,EACZ,EAAKV,SAAS,CAACa,UAAW,MAE1B,EAAKb,SAAS,CAACa,UAAW,2BAGb,KAAVL,GAXe,8CAWeM,KAAKN,IACtCG,GAAa,EACb,EAAKX,SAAS,CAACe,WAAY,MAE3B,EAAKf,SAAS,CAACe,WAAY,4BAGZ,KAAbN,GACFG,GAAgB,EAChB,EAAKZ,SAAS,CAACgB,cAAe,MAE9B,EAAKhB,SAAS,CAACgB,cAAe,+BAG3BN,GAAaC,GAAcC,GAC9B,EAAKZ,SAAS,CAACiB,SAAS,IACxBC,MAAM,GAAD,OAAIC,IAAJ,aAAyB,CAC5BC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBjB,KAAMA,EACNC,MAAOA,EACPC,SAAUA,MAGbgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACAA,EAAKC,IACP,EAAKC,MAAMC,SAASH,GACpB,EAAK5B,SAAS,CACZgC,cAAe,GACff,SAAS,IAEX,EAAKa,MAAMG,cAAc,SAEzB,EAAKjC,SAAS,CACZgC,cAAeJ,EACfX,SAAS,OAIdiB,OAAM,SAAAC,GACL,EAAKnC,SAAS,CACZgC,cAAe,8CACff,SAAS,QAIb,EAAKjB,SAAS,CAACgC,cAAe,0BAjGhC,EAAK1B,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVI,UAAW,GACXE,WAAY,GACZC,cAAe,GACfgB,cAAe,GACff,SAAS,GAVC,E,qDAuGJ,IAAD,OACDJ,EAAYuB,KAAK9B,MAAMO,UAAY,uBAAGwB,UAAU,iBAAiBD,KAAK9B,MAAMO,WAAiB,GAC7FE,EAAaqB,KAAK9B,MAAMS,WAAa,uBAAGsB,UAAU,iBAAiBD,KAAK9B,MAAMS,YAAkB,GAChGC,EAAgBoB,KAAK9B,MAAMU,cAAgB,uBAAGqB,UAAU,iBAAiBD,KAAK9B,MAAMU,eAAqB,GACzGgB,EAAgBI,KAAK9B,MAAM0B,cAAgB,uBAAGK,UAAU,iBAAiBD,KAAK9B,MAAM0B,eAAqB,GACzGM,EAAUF,KAAK9B,MAAMW,QAAU,kBAAC,IAAD,MAAe,GAEpD,OACE,6BAASoB,UAAU,iEACjB,0BAAMA,UAAU,gBACd,yBAAKA,UAAU,WACb,8BAAUR,GAAG,UAAUQ,UAAU,6BAC/B,wBAAIA,UAAU,kBAAd,YACA,kBAAC,IAAD,CACEE,MAAM,OACNhC,KAAK,OACLiC,KAAK,OACLC,SAAU,SAACrC,GAAD,OAAO,EAAKP,cAAcO,EAAG,WAExCS,EACD,kBAAC,IAAD,CACE0B,MAAM,QACNhC,KAAK,gBACLiC,KAAK,QACLC,SAAU,SAACrC,GAAD,OAAO,EAAKP,cAAcO,EAAG,YAExCW,EACD,kBAAC,IAAD,CACEwB,MAAM,WACNhC,KAAK,WACLiC,KAAK,WACLC,SAAU,SAACrC,GAAD,OAAO,EAAKP,cAAcO,EAAG,eAExCY,GAEH,kBAAC,IAAD,CACEd,MAAM,WACNsC,KAAK,SACLE,QAASN,KAAKjC,iBACdwC,WAAW,aAEZX,IAGJM,O,GApJcM,aA0JRrD","file":"static/js/5.8ea2e178.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport FormInput from '../../components/FormFields/FormInput/FormInput';\nimport FormSubmit from '../../components/FormFields/FormSubmit/FormSubmit';\nimport Preloader from '../../components/Preloader/Preloader';\nimport { DATABASE } from '../../constants';\n\n/**\n * Register component\n * - Allows a user to register to the app by displaying a form\n * \n * Required props:\n * - loadUser => Functon to get user information from state\n * - onRouteChange => Function to change the state of route\n */\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      nameError: '',\n      emailError: '',\n      passwordError: '',\n      registerError: '',\n      loading: false\n    }\n  }\n\n  // Sanitize user input\n  sanitize = (string) => {\n    const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '/': '&#x2F;',\n    };\n    const reg = /[&<>\"'/]/ig;\n    return string.replace(reg, (match)=>(map[match]));\n  }\n\n  // Set state on input change\n  onFieldChange = (event, term) => {\n    this.setState({[term]: event.target.value })\n  }\n\n  // Validate user input and register the user\n  onSubmitRegister = (e) => {\n    e.preventDefault();\n    let {name, email, password } = this.state;\n    let validName = false;\n    let validEmail = false;\n    let validPassword = false;\n    const regexpEmail = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    if (name !== '' ) {\n      name = this.sanitize(name)\n      this.setState({name: name})\n      validName = true\n      this.setState({nameError: ''});\n    } else {\n      this.setState({nameError: 'Please enter your name'});\n    }\n\n    if ((email !== '') && (regexpEmail.test(email))) {\n      validEmail = true\n      this.setState({emailError: ''});\n    } else {\n      this.setState({emailError: 'Please enter your email'});\n    }\n\n    if (password !== '' ) {\n      validPassword = true\n      this.setState({passwordError: ''});\n    } else {\n      this.setState({passwordError: 'Please enter your password'});\n    }  \n\n    if ( validName && validEmail && validPassword ) {\n      this.setState({loading: true})\n      fetch(`${DATABASE}/register`, {\n        method: 'post',\n        headers: {'Content-type': 'application/json'},\n        body: JSON.stringify({\n          name: name,\n          email: email,\n          password: password\n        })\n      })\n      .then(response => response.json())\n      .then(user => {\n        if (user.id) {\n          this.props.loadUser(user);\n          this.setState({\n            registerError: '',\n            loading: false\n          });\n          this.props.onRouteChange('home');\n        } else {\n          this.setState({\n            registerError: user,\n            loading: false\n          });\n        }\n      })\n      .catch(err => {\n        this.setState({\n          registerError: 'Something went wrong please try again later',\n          loading: false\n        });\n      })\n    } else {\n      this.setState({registerError: 'Something went wrong'});\n    }\n  }\n\n  render() {\n    const nameError = this.state.nameError ? <p className='error-message'>{this.state.nameError}</p> : '';\n    const emailError = this.state.emailError ? <p className='error-message'>{this.state.emailError}</p> : '';\n    const passwordError = this.state.passwordError ? <p className='error-message'>{this.state.passwordError}</p> : '';\n    const registerError = this.state.registerError ? <p className='error-message'>{this.state.registerError}</p> : '';\n    const preload = this.state.loading ? <Preloader/> : '';\n\n    return (\n      <article className='register br3 ba dark-gray b--black-10 mv4 mw6 shadow-5 center'>\n        <form className='pa4 black-80'>\n          <div className='measure'>\n            <fieldset id='sign_up' className='ba b--transparent ph0 mh0'>\n              <h1 className='f1 fw6 ph0 mh0'>Register</h1>\n              <FormInput \n                label='Name'\n                name='name'\n                type='text'\n                onChange={(e) => this.onFieldChange(e, 'name')}\n              />\n              {nameError}\n              <FormInput \n                label='Email'\n                name='email-address'\n                type='email'\n                onChange={(e) => this.onFieldChange(e, 'email')}\n              />\n              {emailError}\n              <FormInput \n                label='Password'\n                name='password'\n                type='password'\n                onChange={(e) => this.onFieldChange(e, 'password')}\n              />\n              {passwordError}\n            </fieldset>\n            <FormSubmit\n              value='Register'\n              type='submit'\n              onClick={this.onSubmitRegister}\n              extraClass='register'\n            />\n            {registerError}\n          </div>\n        </form>\n        {preload}     \n      </article>\n    );\n  }\n}\n\nexport default Register;\n"],"sourceRoot":""}