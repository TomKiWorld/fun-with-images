{"version":3,"sources":["constants.js","components/Navigation/Navigation.js","components/Logo/Logo.js","components/Header/Header.js","HOC/AsyncComponent/AsyncComponent.js","containers/SignIn/SignIn.js","components/Greet/Greet.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","components/ColorList/ColorList.js","containers/FaceApp/FaceApp.js","components/Footer/Footer.js","actions.js","containers/App.js","serviceWorker.js","reducers.js","index.js","components/FormFields/FormInput/FormInput.js","components/FormFields/FormSubmit/FormSubmit.js","components/Logo/funGif.gif","components/FaceRecognition/colorsIcon.svg"],"names":["DATABASE","CHANGE_INPUT_VALUE","RESUBMIT_INPUT_VALUE","Navigation","onRouteChange","isSignedIn","mainLink","route","onClick","className","Logo","src","funImages","alt","Header","asyncComponent","importComponent","props","state","component","default","this","setState","Component","SignIn","handleKeyUp","e","keyCode","document","querySelector","click","onEmailChange","event","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","preventDefault","fetch","method","headers","body","JSON","stringify","email","password","then","response","json","user","id","loadUser","loginError","onSubmitVisitor","action","FormInput","label","name","type","onChange","onKeyUp","extraClass","FormSubmit","Greet","entries","greet","ImageLinkForm","onInputChange","onButtonSubmit","imageUrlError","getColorsError","getFacesError","inputValue","FaceRecognition","imageUrl","onShowClick","imgBlock","colorsView","colorsIcon","ColorList","colors","showColor","display","colorText","length","list","map","color","hex","key","style","backgroundColor","FaceApp","toggleColorList","showColorList","userName","onImageUrlSubmit","boxes","Footer","href","rel","setInputValue","text","payload","particlesOptions","particles","line_linked","shadow","enable","blur","number","density","value_area","initalState","joined","App","data","test","querySelectorAll","forEach","el","remove","getColors","getFaces","onImageResubmit","url","onResubmitInput","window","setTimeout","input","outputs","errMsg","Error","count","Object","assign","catch","err","console","log","colorsUsed","singleColor","w3c","push","calculateFaceLocations","imageElement","getElementById","imageWidth","Number","width","imageHeight","height","clarifaiFaces","regions","boundingBoxes","face","calculateBoundingBox","boundingBox","displayBoundingBox","faceBoundingBoxData","region_info","bounding_box","leftCol","left_col","topRow","top_row","RightCol","right_col","bottomRow","bottom_row","box","holder","createElement","classList","add","left","toFixed","top","right","bottom","parentElement","appendChild","content","AsyncRegister","AsyncComponent","AsyncProfile","database","userId","userEmail","onResubmit","params","connect","dispatch","resubmitImageInput","Boolean","location","hostname","match","inputInitalState","store","createStore","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","receivedClass","autocomplete","htmlFor","autoComplete","module","exports"],"mappings":"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","file":"static/js/main.c44d5093.chunk.js","sourcesContent":["// Set to false during local development \n// Make sure to change your production url\nconst productionEnv = true;\nexport const DATABASE = productionEnv ? 'https://fierce-oasis-21316.herokuapp.com' : 'http://localhost:3000';\n\n// Url input field\nexport const CHANGE_INPUT_VALUE = 'CHANGE_INPUT_VALUE';\nexport const RESUBMIT_INPUT_VALUE = 'RESUBMIT_INPUT_VALUE';\n","import React from 'react';\n\n/**\n * Site navigation\n * \n * Required props:\n * - onRouteChange => Function to change the state of route\n * - isSignedIn => State to show relative links\n * - route => The current route from state\n */\nconst Navigation = ({ onRouteChange, isSignedIn, route }) => {\n  const mainLink = route === 'home' \n    ? \n    <p \n    onClick={() => onRouteChange('profile')}\n    className='link dim black underline pa3 pointer'>Profile</p>\n    :\n    <p \n      onClick={() => onRouteChange('home')}\n      className='link dim black underline pa3 pointer'>Home</p>\n\n  if (isSignedIn) {\n    return (\n      <nav className='main-nav end'>\n        {mainLink}\n        <p \n          onClick={() => onRouteChange('signin')}\n          className='link dim black underline pa3 pointer'>Sign out</p>\n      </nav>\n    )\n  } else {\n    return(\n      <nav className='main-nav end'>\n        <p \n          onClick={() => onRouteChange('signin')}\n          className='link dim black underline pa3 pointer'>Sign in</p>\n        <p \n          onClick={() => onRouteChange('register')}\n          className='link dim black underline pa3 pointer'>Register</p>\n      </nav>\n    )\n  }\n}\n\nexport default Navigation;\n","import React from 'react';\nimport './Logo.css';\nimport funImages from './funGif.gif';\n\n/**\n * Site logo\n */\nconst Logo = () => {\n  return (\n    <div className='Logo'>\n      <img src={funImages} alt='logo'/>\n    </div>\n  );\n}\n\nexport default Logo;\n","import React from 'react';\nimport Navigation from '../Navigation/Navigation';\nimport Logo from '../Logo/Logo';\n\n/**\n * Site header \n * \n * Required props:\n * - isSignedIn => In order to dispaly the correct naviagtion from state\n * - onRouteChange => Function to change route state\n * - route => The current route from state\n */\nconst Header = ({isSignedIn, onRouteChange, route}) => {\n  return (\n    <header className='site-header'>\n      <Navigation \n          isSignedIn={isSignedIn}\n          onRouteChange={onRouteChange}\n          route={route} />\n      <Logo />\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        component: null\n      }\n    }\n    \n    async componentDidMount() {\n      const { default: component } = await importComponent();\n      this.setState({component: component})\n    }\n\n    render() {\n      const Component = this.state.component;\n      return Component ? <Component {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n}\n","import React, { Component } from 'react';\nimport FormInput from '../../components/FormFields/FormInput/FormInput';\nimport FormSubmit from '../../components//FormFields/FormSubmit/FormSubmit';\nimport { DATABASE } from '../../constants';\n\n/**\n * Sign In component\n * - Allows a user to sign in to the app by displaying a form\n * \n * Required props:\n * - loadUser => Functon to get user information from state\n * - onRouteChange => Function to change the state of route\n */\nclass SignIn extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      signInEmail: '',\n      signInPassword: '',\n      loginError: ''\n    }\n  }\n\n  // Allow pressing the enter key and not only the button\n  handleKeyUp = (e) => {\n    if (e.keyCode === 13) {\n      const signIn = document.querySelector('.signIn');\n      signIn.click();\n    }\n  }\n\n  // Set email on input change\n  onEmailChange = (event) => {\n    this.setState({signInEmail: event.target.value })\n  }\n\n  // Set password on input change\n  onPasswordChange = (event) => {\n    this.setState({signInPassword: event.target.value })\n  }\n\n  // Check for user in database and login \n  onSubmitSignIn = (e) => {\n    e.preventDefault();\n    if ((this.state.signInEmail !== '') && (this.state.signInPassword !== '')) {\n      fetch(`${DATABASE}/signin`, {\n        method: 'post',\n        headers: {'Content-type': 'application/json'},\n        body: JSON.stringify({\n          email: this.state.signInEmail,\n          password: this.state.signInPassword\n        })\n      })\n      .then(response => response.json())\n      .then(user => {\n        if (user.id) {\n          this.props.loadUser(user);\n          this.setState({loginError: ''});\n          this.props.onRouteChange('home');\n        } else {\n          this.setState({loginError: user});\n        }\n      })\n    } else {\n      this.setState({loginError: 'Please make sure both fields are entered'});\n    }\n  }\n\n  // Sign in as visitor\n  onSubmitVisitor = (e) => {\n    e.preventDefault();\n    fetch(`${DATABASE}/signin`, {\n      method: 'post',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify({\n        email: 'visitor@gmail.com',\n        password: 'visit'\n      })\n    })\n    .then(response => response.json())\n    .then(user => {\n      if (user.id) {\n        this.props.loadUser(user);\n        this.props.onRouteChange('home');\n      }\n    })\n  }\n\n  render() {\n    const { onRouteChange } = this.props;\n    const loginError = this.state.loginError ? <p className='error-message'>{this.state.loginError}</p> : '';\n\n    return (\n      <article className='sign-in br3 ba dark-gray b--black-10 mv4 mw6 shadow-5 center'>\n        <form className='pa4 black-80' action='/'>\n          <div className='measure'>\n            <fieldset id='sign_up' className='ba b--transparent ph0 mh0'>\n              <legend className='f1 fw6 ph0 mh0'>Sign In</legend>\n              <FormInput \n                label='Email'\n                name='email-address'\n                type='email'\n                onChange={this.onEmailChange}\n                onKeyUp={this.handleKeyUp}\n                extraClass='inputField'\n              />\n              <FormInput \n                label='Password'\n                name='password'\n                type='password'\n                onChange={this.onPasswordChange}\n                onKeyUp={this.handleKeyUp}\n                extraClass='inputField'\n              />\n            </fieldset>\n            {loginError}\n            <FormSubmit\n              value='Sign in'\n              type='submit'\n              onClick={this.onSubmitSignIn}\n              extraClass='signIn'\n            />\n            <FormSubmit\n              value='Log in as Visitor'\n              type='submit'\n              onClick={this.onSubmitVisitor}\n              // extraClass=''\n            />\n            <div className='lh-copy mt3'>\n              <p \n                onClick={() => onRouteChange('register')}\n                className='f6 link dim black db pointer'>Register</p>\n            </div>\n          </div>\n        </form>\n      </article>\n    );\n  }  \n}\n\nexport default SignIn;\n","import React from 'react';\n\n/**\n * Greet component\n * - Display short greet and amount of entries the user used the app\n * \n * Required props:\n * - name => User name from state\n * - entries => Amount of times images were submitted from state\n */\nconst Greet = ({name, entries}) => {\n  const greet = entries > 0 ? 'Welcome back' : 'Lets start';\n  return (\n    <div>\n      <div className='white f3'>\n        <p>{greet} <span className='capitalize'>{name}</span>, your current entry count is:</p>\n      </div>\n      <div className='white f1'>\n        <p>#{entries}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Greet;\n","import React from 'react';\nimport './ImageLinkForm.css';\n\n/**\n * Image link form \n * - Input field to submit a url\n * - submit button\n * \n * Required props:\n * - onInputChange => Register input changes to state\n * - onButtonSubmit => Submit the image url\n * - imageUrlError => Display error to screen\n * - inputValue => Input value from state important in case of resubmission \n */\n// Allow pressing the enter key and not only the button\nconst handleKeyUp = (e) => {\n  if (e.keyCode === 13) {\n    const detect = document.querySelector('.detect');\n    detect.click();\n  }\n}\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit, imageUrlError, getColorsError, getFacesError, inputValue }) => {\n  return (\n    <div>\n      <p className='f3'>This App detects faces in images</p>\n      <p>Click on the <strong>paint icon</strong> to see which colors were detected</p>\n      <div className='center'>\n        <div className='center form pa4 br3 shadow-5'>\n          <input \n            className='f4 pa2 w-70 center' \n            value={inputValue}\n            type='url' \n            onChange={onInputChange}\n            onKeyUp={(e) => handleKeyUp(e)}\n          />\n          <button \n            className='detect w-30 grow link ph3 pv2 dib white bg-light-blue' \n            onClick={onButtonSubmit}\n          >Detect</button>\n        </div>\n      </div>\n      {imageUrlError}\n      {getColorsError}\n      {getFacesError}\n    </div>\n  );\n}\n\nexport default ImageLinkForm;\n","import React from 'react';\nimport './FaceRecognition.css';\nimport colorsIcon from './colorsIcon.svg';\n\n/**\n * Displays \n * - Preview of submitted image url \n * - Squares where faces were found\n * - Option to see colors found in the image\n * \n * Required props:\n * - imageUrl => From state\n * - onShowClick => Function to change state of toggle color list\n */\nconst FaceRecognition = ({ imageUrl, onShowClick }) => {\nconst imgBlock = imageUrl ? <img id='imageElement' src={imageUrl} alt='result' /> : <p>Submit an image url to start</p>\nconst colorsView = imageUrl ? \n  <div className='view-colors' onClick={onShowClick}>\n    <img src={colorsIcon} alt='View Colors' />\n  </div> : '';\n\n  return (\n    <div className='center image-holder'>\n      {colorsView}\n      {imgBlock}\n    </div>\n  );\n}\n\nexport default FaceRecognition;\n","import React from 'react';\nimport './ColorList.css';\n\n/**\n * Pop up to show colors detected in images\n * \n * Required props:\n * - colors => Array of colors from the api\n * - showColor => Show or hide the element\n * - onShowClick => On click function to change the value of showColor\n */\nconst ColorList = ({ colors, showColor, onShowClick }) => {\n  const display = showColor ? 'block' : 'none';\n  let colorText = <p>No colors detected.</p>\n  if(colors.length) {\n    const list = colors.map(color => {\n      const { hex, name } = color;\n      return <li key={hex} ><span style={{backgroundColor:hex}}></span>HEX: {hex}, Name: {name}</li>;\n    });\n    colorText = <ul>{list}</ul>;\n  }  \n\n  return (\n    <div className='colors-list br3' style={{display: display}}>\n      <span \n        className='close-colors' \n        onClick={onShowClick}>X</span>\n      <h2>These colors were detected:</h2>\n      {colorText}\n    </div>\n  );\n}\n\nexport default ColorList;","import React, { Component } from 'react';\nimport Greet from '../../components/Greet/Greet';\nimport ImageLinkForm from '../../components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from '../../components/FaceRecognition/FaceRecognition';\nimport ColorList from '../../components/ColorList/ColorList'\n\n/**\n * Main view of the fun with images app\n * \n * Required props:\n * - userName => User name from state\n * - entries => Count of user entries from state\n * - inputValue => User input from state\n * - imageUrlError => Error to display during url submittion from state\n * - onInputChange => Function to set state of input value\n * - onImageUrlSubmi => Function on url submit\n * - imageUrl => The image url from state\n * - boxes => Location of faces on the page\n * - colors => List of colors found by the API\n */\nclass FaceApp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showColorList: false\n    };\n  }\n\n  // Toggle the color list pop up\n  toggleColorList = () => {\n    this.setState({showColorList: !this.state.showColorList});\n  }\n   \n  render() {\n    const {\n      userName, \n      entries, \n      imageUrlError, \n      getColorsError,\n      getFacesError,\n      onInputChange, \n      onImageUrlSubmit,\n      imageUrl,\n      boxes,\n      colors\n    } = this.props;\n    const { showColorList } = this.state;\n    return (\n      <article className='pa4 mb4'>\n        <Greet \n          name={userName} \n          entries={entries} />\n        <ImageLinkForm\n          inputValue={this.props.inputValue}\n          imageUrlError={imageUrlError}\n          getColorsError={getColorsError}\n          getFacesError={getFacesError}\n          onInputChange={onInputChange} \n          onButtonSubmit={onImageUrlSubmit} />\n        <FaceRecognition \n          imageUrl={imageUrl} \n          boxes={boxes} \n          onShowClick={this.toggleColorList} />\n        <ColorList \n          colors={colors}\n          showColor={showColorList}\n          onShowClick={this.toggleColorList} />\n      </article>\n    );\n  }\n}\n\nexport default FaceApp;\n","import React from 'react';\n\n/**\n * Site footer\n */\nconst Footer = () => {\n  return (\n    <footer className='site-footer'>\n      <p>Made with <span>&hearts;</span> by <a href='https://github.com/TomKiWorld' target='_blank' rel='noopener noreferrer'>TomKiWorld</a></p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import {\n  CHANGE_INPUT_VALUE,\n  RESUBMIT_INPUT_VALUE\n} from './constants';\n\nexport const setInputValue = (text) => {\n  return {\n    type: CHANGE_INPUT_VALUE,\n    payload: text\n  }\n};\n\nexport const resubmitImageInput = (text) => {\n  return {\n    type: RESUBMIT_INPUT_VALUE,\n    payload: text\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Header from '../components/Header/Header';\nimport AsyncComponent from '../HOC/AsyncComponent/AsyncComponent';\nimport SignIn from './SignIn/SignIn';\nimport FaceApp from './FaceApp/FaceApp';\nimport Footer from '../components/Footer/Footer';\nimport { DATABASE } from '../constants';\nimport { setInputValue, resubmitImageInput } from '../actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    inputValue: state.inputValue\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onInputChange: (event) => dispatch(setInputValue(event.target.value)),\n    onResubmitInput: (text) => dispatch(resubmitImageInput(text))\n  }\n}\n\n// Options for the particals component\nconst particlesOptions = {\n  particles: {\n    line_linked: {\n      shadow: {\n        enable: true,\n        color: \"#3CA9D1\",\n        blur: 5\n      }\n    },\n    number: {\n      value: 50,\n      density: {\n        enable: true,\n        value_area: 500\n      }\n    }\n  }\n}\n\n// Initiale state for reset during logout\nconst initalState = {\n  imageUrl: '',\n  imageUrlError: '',\n  getColorsError: '',\n  getFacesError: '',\n  colors: [],\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initalState;\n  }\n\n  // Set the user from the response into state\n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n\n  // Validate the url on submit and make sure a new url is entered\n  onImageUrlSubmit = () => {\n    if (this.props.inputValue) {\n      const regexp =  /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n      if (this.props.inputValue !== this.state.imageUrl) {\n        if (regexp.test(this.props.inputValue)) {\n          this.setState({\n            imageUrl: this.props.inputValue,\n            imageUrlError: ''\n          });\n          document.querySelectorAll('.bounding-box').forEach(el => el.remove());\n          this.getColors();\n          this.getFaces();\n        } else {\n          this.setState({imageUrlError: 'Please enter a valid url'});\n        }        \n      } else {\n        this.setState({imageUrlError: 'Please enter a new url'});\n      } \n    } else {\n      this.setState({imageUrlError: 'Please enter an image url'});\n    }    \n  }\n\n  // Resubmit an image from the profile page\n  onImageResubmit = (url) => {\n    this.props.onResubmitInput(url);\n    this.onRouteChange('home');\n    this.setState({\n      imageUrl: '',\n      imageUrlError: ''\n    });\n    window.setTimeout(() => {\n      this.onImageUrlSubmit();\n    }, 500);\n  }\n\n  // Fetch the colors from the colors API and set state\n  getColors = () => {\n    fetch(`${DATABASE}/image-colors`, {\n      method: 'post',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify({\n        input: this.props.inputValue\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      if (!response || !response.outputs) {\n        const errMsg = response ? response : 'No response from faces API';\n        this.setState({getColorsError: errMsg})\n        throw new Error(errMsg);\n      } else {\n        this.setState({getColorsError: ''})\n      }\n      fetch(`${DATABASE}/image`, {\n        method: 'put',\n        headers: {'Content-type': 'application/json'},\n        body: JSON.stringify({\n          id: this.state.user.id,\n          url: this.state.imageUrl\n        })\n      })\n      .then(response => response.json())\n      .then(count => {\n        this.setState(Object.assign(this.state.user, { entries: count }));\n      })\n      .catch(err => console.log('getFaces colors: ', err))\n      \n      const colorsUsed = [];\n      const colorsFound = response.outputs[0].data.colors;\n      colorsFound.map(singleColor => {\n        const color = {\n          hex: singleColor.w3c.hex,\n          name: singleColor.w3c.name\n        }\n        colorsUsed.push(color);\n        return this.setState({colors: colorsUsed});\n      })\n    })\n    .catch(err => console.log(err));\n  }\n\n  // Fetch the faces from the faces API and set state\n  getFaces = () => {\n    fetch(`${DATABASE}/image-faces`, {\n      method: 'post',\n      headers: {'Content-type': 'application/json'},\n      body: JSON.stringify({\n        input: this.props.inputValue\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      if (!response || !response.outputs) {\n        const errMsg = response ? response : 'No response from colors API';\n        this.setState({getFacesError: errMsg})\n        throw new Error(errMsg);\n      } else {\n        this.setState({getFacesError: ''})\n      }\n      this.calculateFaceLocations(response)\n    })\n    .catch(err => console.log('getFaces error: ', err));\n  }\n\n  // Calculate location of all bounding boxes based on the getFaces response\n  calculateFaceLocations = (data) => {\n    const imageElement = document.getElementById('imageElement');\n    if (!imageElement) {\n      return;\n    }\n    const imageWidth = Number(imageElement.width);\n    const imageHeight = Number(imageElement.height);\n    const clarifaiFaces = data.outputs[0].data.regions;\n    const boundingBoxes = [];\n    clarifaiFaces.map(face => this.calculateBoundingBox(face, imageWidth, imageHeight, boundingBoxes));\n    boundingBoxes.map(boundingBox => this.displayBoundingBox(boundingBox, imageElement));    \n  }\n\n  // Calculate location of a single bounding box based on the getFaces response\n  calculateBoundingBox = (face, imageWidth, imageHeight, boundingBoxes) => {\n    const faceBoundingBoxData = face.region_info.bounding_box;\n    const boundingBox = {\n      leftCol: faceBoundingBoxData.left_col * imageWidth,\n      topRow: faceBoundingBoxData.top_row * imageHeight,\n      RightCol: imageWidth - (faceBoundingBoxData.right_col * imageWidth),\n      bottomRow: imageHeight - (faceBoundingBoxData.bottom_row * imageHeight)\n    }\n    boundingBoxes.push(boundingBox);\n  }\n\n  // Display the bounding box in parent element\n  displayBoundingBox = (box, holder) => {\n    const boundingBox = document.createElement('DIV');\n    boundingBox.classList.add('bounding-box');\n    boundingBox.style.left = `${box.leftCol.toFixed(4)}px`;\n    boundingBox.style.top = `${box.topRow.toFixed(4)}px`;\n    boundingBox.style.right = `${box.RightCol.toFixed(4)}px`;\n    boundingBox.style.bottom = `${box.bottomRow.toFixed(4)}px`;\n    return holder.parentElement.appendChild(boundingBox);\n  }\n\n  // Change the route state\n  onRouteChange = (route) => {\n    ((route === 'home') || (route === 'profile')) ? this.setState({isSignedIn: true}) : this.setState({isSignedIn: false});\n    if (route === 'signin') {\n      this.setState(initalState);\n      setInputValue('');\n    }\n    if (route === 'home') {\n      this.setState({\n        imageUrl: '',\n        imageUrlError: ''\n      });\n    }\n    this.setState({route: route})\n  }\n\n  render() {\n    const { isSignedIn, imageUrl, boxes, colors, route } = this.state;\n    const imageUrlError = this.state.imageUrlError ? <p className='error-message'>{this.state.imageUrlError}</p> : '';\n    const getColorsError = this.state.getColorsError ? <p className='error-message'>{this.state.getColorsError}</p> : '';\n    const getFacesError = this.state.getFacesError ? <p className='error-message'>{this.state.getFacesError}</p> : '';\n    const { inputValue, onInputChange } = this.props;\n    let content = '';\n    switch(route) {\n      case 'home':\n        content = \n        <FaceApp \n          userName={this.state.user.name}\n          entries={this.state.user.entries}\n          inputValue={inputValue}\n          imageUrlError={imageUrlError}\n          getColorsError={getColorsError}\n          getFacesError={getFacesError}\n          onInputChange={onInputChange}\n          onImageUrlSubmit={this.onImageUrlSubmit}\n          imageUrl={imageUrl} \n          boxes={boxes}\n          colors={colors}\n        />\n        break;\n      case 'register':\n        const AsyncRegister = AsyncComponent(() => import('./Register/Register'));\n        content = \n        <AsyncRegister \n          loadUser={this.loadUser}\n          onRouteChange={this.onRouteChange}\n        />\n        break;\n      case 'profile':\n        const AsyncProfile = AsyncComponent(() => import('./Profile/Profile'));\n        content = \n        <AsyncProfile \n          database={DATABASE}\n          userId={this.state.user.id}\n          userName={this.state.user.name}\n          userEmail={this.state.user.email}\n          entries={this.state.user.entries}\n          onRouteChange={this.onRouteChange}\n          onResubmit={this.onImageResubmit}\n        />\n        break;\n      default:\n        content =\n        <SignIn \n          loadUser={this.loadUser}\n          onRouteChange={this.onRouteChange} \n        />\n    }\n\n    return (\n      <div className='App'>\n        <Particles\n          className='particles' \n          params={particlesOptions}\n        />\n        <Header \n          isSignedIn={isSignedIn}\n          onRouteChange={this.onRouteChange} \n          route={this.state.route}\n          />\n        { content }\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_INPUT_VALUE,\n  RESUBMIT_INPUT_VALUE\n} from './constants'\n\nconst inputInitalState = {\n  inputValue: ''\n}\n\nexport const imageUrlInputValue = (state=inputInitalState, action={}) => {\n  switch(action.type){\n    case CHANGE_INPUT_VALUE : \n      return { ...state, inputValue: action.payload };\n    case RESUBMIT_INPUT_VALUE :\n      return { ...state, inputValue: action.payload }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { imageUrlInputValue } from './reducers';\nimport 'tachyons';\n\nconst store = createStore(imageUrlInputValue);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n","import React from 'react';\n\n/**\n * Form input field\n * - Display short greet and amount of entries the user used the app\n * \n * Required props:\n * - label => Displayed name\n * - name => For the is and label for\n * - type => Field type\n * - onChange => Function on input change\n * - onKeyUp => Function on key up - enter detection\n * Optional props:\n * - extraClass => For classlist \n */\nconst FormInput = ({label, name, type, onChange, onKeyUp, extraClass}) => {\n  const receivedClass= extraClass ?? '';\n  let autocomplete = ''\n  switch(name) {\n    case 'password':\n      autocomplete = 'current-password';\n      break;\n    case 'email-address':\n      autocomplete = 'email';\n      break;\n    case 'name':\n      autocomplete = 'name';\n      break;\n    default:\n      autocomplete = '';\n  }\n\n  return (\n    <div className='mt3'>\n      <label className='db fw6 lh-copy f6' htmlFor={type}>{label}\n        <input \n          onChange={onChange}\n          onKeyUp={onKeyUp}\n          className={`${receivedClass} pa2 input-reset ba b--black bg-transparent hover-bg-black hover-white w-100`} \n          type={type} \n          name={name} \n          id={name} \n          autoComplete={autocomplete}\n        />\n      </label>\n    </div>\n  );\n}\n\nexport default FormInput;\n","import React from 'react';\n\n/**\n * Form submit\n * - Display short greet and amount of entries the user used the app\n * \n * Required props:\n * - value => Displayed name\n * - type => Field type\n * - onClick => Function on button click\n * Optional props:\n * - extraClass => For classlist\n */\nconst FormSubmit = ({value, type, onClick, extraClass}) => {\n  const receivedClass= extraClass ?? '';\n  return (\n    <div className='mt3'>\n      <input \n        onClick={onClick}\n        className={`${receivedClass} b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib`} \n        type={type}\n        value={value}\n      />\n    </div>\n  );\n}\n\nexport default FormSubmit;\n","module.exports = __webpack_public_path__ + \"static/media/funGif.1e4a7e6e.gif\";","module.exports = __webpack_public_path__ + \"static/media/colorsIcon.16c2fe4a.svg\";"],"sourceRoot":""}